[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.root_name }}"
dynamic = ["version", "dependencies"]
description = ''
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [
  { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

#dependencies = []
[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[project.urls]
Source = "{{ cookiecutter.git_repo }}"
Issues = "{{ cookiecutter.git_repo + '/issues' }}"
Documentation = "{{ 'https://' + cookiecutter.git_repo.split('/')[3] + '.' + cookiecutter.git_repo.split('/')[2].split('.')[0] + '.io/' + cookiecutter.git_repo.split('/')[4] }}" 


[tool.hatch.version]
path = "src/{{cookiecutter.module_name}}/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/{{cookiecutter.module_name}} tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A", "ARG",
  "B",
  "C",
  "DTZ",
  "E", "EM",
  "F", "FBT",
  "I", "ICN", "ISC",
  "N",
  "PLC", "PLE", "PLR", "PLW",
  "Q",
  "RUF",
  "S",
  "T", "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore some unsecure rules:
  "S301",
  # Ignore relative imports
  "TID252"
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["{{cookiecutter.module_name}}"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "E501", "F401"]
"__init__.py" = ["F401"]

[tool.coverage.run]
source_pkgs = ["{{cookiecutter.module_name}}"]
branch = true
parallel = true
omit = [
  "src/{{cookiecutter.module_name}}/__about__.py",
]


[tool.coverage.paths]
{{cookiecutter.module_name}} = ["src/{{cookiecutter.module_name}}"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "__version__ = "
]


[tool.coverage.html]
directory = "coverage_html_report"